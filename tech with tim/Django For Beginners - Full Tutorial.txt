FULL-STACK framework?

pip install Django

set a new environment: django-admin startproject my_site

manage.py and urls.py are important

like a flask run (used to test): python manage.py runserver <optional port number>

to create the app: python manage.py startapp my_app

views.py store different views for the app (web pages)

on views.py:
from django.http import HttpResponse
def index(response):
    return HttpResponse('hello world!')

create urls.py inside main (paths to different web pages)

on main/urls.py:
from django.urls import path
from . import views
urlpatterns = [
    path("", views.index, name="index")
]

on my_site/urls.py:
from django.urls import path, include
urlpatterns = [
    path('', include("main.urls"))
]

In order to set up a database, we need to append the name of the app in settings.INSTALLED_APPS, but with a specific syntax: "principal.apps.PrincipalConfig"

to make it work: python manage.py migrate

then, you will create classes within models.py

python manage.py makemigrations principal

then python manage.py migrate, again

making migrations is like adding something to the staging area in git

to open a django interactive shell: python manage.py shell

now you can see dynamic pages being shown just by typing something in the url bar

to do this, you will need to set path("<int:id>", views.index, name="index") inside principal.urls.urlpatterns and 
def index(response, id):    
    ls = ToDoList.objects.get(id=id)
    return HttpResponse(f'<h1> {ls.name} </h1>')
inside views.py

we can also do:
def index(response, id):  # n√£o seria request? 
    ls = ToDoList.objects.get(id=id)
    item = ls.item_set.get(id=1)
    return HttpResponse(f'<h1> {ls.name} </h1> <br> <h2> {item.text} </h2>')

admin dashboard:

you have to create a log in account

to acess /admin, you have to log in

to create an account: python manage.py createsuperuser, then put a name, e-mail adress and password

you need to add the database you've created to the dashboard via admin.py: 
from .models import ToDoList
admin.site.register(ToDoList)