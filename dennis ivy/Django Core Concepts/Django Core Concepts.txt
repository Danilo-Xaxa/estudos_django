1 - Apps: apps -> models, views, templates and urls

2 - Views: function based vies vs class based views (functions first, they are more simple and used by the docs).
views vs templates = views are functions/classes that are written in views.py and bound to a path/url. when they are called (automatically by django), they display the templates with the data from the models

3 - URL Routing: 
urlpatterns = [
    path('about/', views.aboutView)  # why would be the name='about' needed?
]

4 - Template Language: django template language is different from jinja2, but traditional templates are being replaced with react, vue, angular, etc

5 - Models: class based representations of our database tables

6 - Django ORM: ModelName.objects.get(id=1), all(), filter(), etc

7 - Admin Dashboard: view, create and update any data in the database. highly customizable

8 - CRUD: with any database, you will be creating, reading, updating and deleting data. code from scratch: save(), delete(). you can also use django model forms or class based views that handle these functionalities.

9 - Static Files: css, js and images

10 - Authentication: it's not authorization. register, log-in, log-out and reset password (in this one you will need to be able to send e-mails). deleting account too?

11 - Django Commands: 5 most common commands (see "5 django commands")

12 - Signals: listen to events. senders and receveirs 

13 - Production Database: don't use sqlite for big projects in production, use postgresql or mysql with settings.py

14 - Django REST Framework: you could build an api with django on the back-end and a js framework on the front-end, but you really should learn django rest

15 - Deployment: from localhost to www! heroku, linode, aws...